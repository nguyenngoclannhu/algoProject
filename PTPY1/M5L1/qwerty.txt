from pygame import *
from random import *

# Parent class for sprites
class GameSprite(sprite.Sprite):
    # Class constructor
    def __init__(self, player_image, player_x, player_y, player_speed):
        super().__init__()
        # Each sprite must store an image property
        self.image = transform.scale(image.load(player_image), (55, 55))
        self.speed = player_speed
        # Each sprite must store the rect property for moveing and position
        self.rect = self.image.get_rect()
        self.rect.x = player_x
        self.rect.y = player_y
 
    def reset(self):
        window.blit(self.image, (self.rect.x, self.rect.y))

class Player(GameSprite):
    def update(self):
        keys = key.get_pressed()
        if keys[K_a] and self.rect.x > 5:
            self.rect.x -= self.speed
        if keys[K_d] and self.rect.x < win_width - 80:
            self.rect.x += self.speed
        if keys[K_w] and self.rect.y > 5:
            self.rect.y -= self.speed
        if keys[K_s] and self.rect.y < win_height - 80:
           self.rect.y += self.speed

class Enemy(GameSprite):
    # Random move enemy 'AI'
    def __init__(self, player_image, player_x, player_y, player_speed):
        super().__init__(player_image, player_x, player_y, player_speed)    
        self.move_ammount = 0
        self.directions = ['up', 'down', 'left', 'right']
        self.direction = choice(self.directions)
    # Bounce off screen boundaries    
    def update_extra(self):
        if self.rect.x < 0:
            self.direction = 'right'
        if self.rect.x > win_width - 40:
            self.direction = 'left'
        if self.rect.y < 0:
            self.direction = 'down'
        if self.rect.y > win_height - 50:
            self.direction = 'up'
        # Move
        if self.move_ammount < randint(50,150):
            if self.direction == 'up':
                self.rect.y -= self.speed
            if self.direction == 'down':
                self.rect.y += self.speed
            if self.direction == 'left':
                self.rect.x -= self.speed
            if self.direction == 'right':
                self.rect.x += self.speed
            self.move_ammount += 1
        else:
        # Refresh local variables 
            self.speed = randint(1,2)
            self.move_ammount = 0
            self.direction = choice(self.directions)
    # ----------------------

# Player Character
player = Player('hero.png', 5, 5, 4)

# Monsters
monsters = []
monster_number = 10
for i in range(monster_number):
    monster = Enemy('cyborg.png', 450, 200, randint(1,2))
    monsters.append(monster)

#Game scene:
win_width = 700
win_height = 500

window = display.set_mode((win_width, win_height))
display.set_caption("Dodge the creeps!")
background = transform.scale(image.load("background.jpg"), (win_width, win_height))

# -- Game Variables --
game = True
finish = False
clock = time.Clock()
FPS = 60

font.init()
font = font.Font(None, 70)
lose = font.render('YOU LOSE', True, (180,0,0))
# --------------------

while game:
    for e in event.get():
        if e.type == QUIT:
            game = False

    if finish != True:
        window.blit(background,(0,0))

        for monster in monsters:
            monster.update_extra()

        player.update()
        
        for monster in monsters:
            monster.reset()
        
        player.reset()

    for monster in monsters:
        if sprite.collide_rect(player, monster):
            finish = True
            window.blit(lose,(200,200))
        
    display.update()
    clock.tick(FPS)